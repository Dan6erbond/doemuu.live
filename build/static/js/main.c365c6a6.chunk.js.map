{"version":3,"sources":["store/reducer/counter/reducer.ts","store/reducer/index.ts","store/index.ts","store/reducer/counter/actions.ts","view/Home.tsx","view/About.tsx","view/Landingpage.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["counterReducer","state","action","type","rootReducer","combineReducers","counter","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","applicationStore","createStore","increment","decrement","connect","dispatch","bindActionCreators","dispatchIncrement","dispatchDecrement","className","value","onClick","to","LandingPage","App","exact","path","component","Home","About","Boolean","location","hostname","match","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","ReactDOM","render","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+RAaeA,EAbQ,WAA6B,IAA5BC,EAA2B,uDAAnB,EAAGC,EAAgB,uCACjD,OAAQA,EAAOC,MACb,IAAK,YACH,OAAOF,EAAQ,EAEjB,IAAK,YACH,OAAOA,EAAQ,EAEjB,QACE,OAAOA,ICFEG,EAJKC,YAAgB,CAClCC,QAASN,ICOLO,EAAmBC,OAAOC,sCAAwCC,IAOzDC,EALUC,YACvBR,EACAG,K,uBCdWM,EAAY,WACvB,MAAO,CACLV,KAAM,cAIGW,EAAY,WACvB,MAAO,CACLX,KAAM,cCyBV,IAaeY,eAJS,SAACd,GAAD,MAAiB,CACvCK,QAASL,EAAMK,YAVU,SAACU,GAAD,OACzBC,YACE,CACEC,kBAAmBL,EACnBM,kBAAmBL,GAErBE,KAOWD,EAnCf,YAA6E,IAA7DT,EAA4D,EAA5DA,QAASY,EAAmD,EAAnDA,kBAAmBC,EAAgC,EAAhCA,kBAC1C,OACE,yBAAKC,UAAU,QACb,4BAAQA,UAAU,eAChB,4CACA,2BACEjB,KAAK,SACLkB,MAAM,YACND,UAAU,gIACVE,QAASJ,IAEX,2BACEf,KAAK,SACLkB,MAAM,YACNC,QAASH,IAEX,2BAAIb,GACJ,kBAAC,IAAD,CAAMiB,GAAG,UAAT,cCLR,IAIeR,eAJS,SAACd,GAAD,MAAiB,CACvCK,QAASL,EAAMK,WAGFS,EAhBf,YAA0C,IAAzBT,EAAwB,EAAxBA,QACf,OACE,yBAAKc,UAAU,QACb,4BAAQA,UAAU,eAChB,0CACA,uCAAad,GACb,kBAAC,IAAD,CAAMiB,GAAG,KAAT,a,MCSOC,MAnBf,WACE,OACE,yBAAKJ,UAAU,eACb,yBAAKA,UAAU,8BACb,8CAEF,yBAAKA,UAAU,6BACb,0BAAMA,UAAU,iBAAhB,WACA,0BAAMA,UAAU,iBAAhB,WACA,0BAAMA,UAAU,iBAAhB,aACA,yBAAKA,UAAU,0BACb,gDACA,0BAAMA,UAAU,QAAhB,YCGKK,MAff,WACE,OACE,yBAAKL,UAAU,OACb,6BACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOM,OAAK,EAACC,KAAK,IAAIC,UAAWC,IACjC,kBAAC,IAAD,CAAOF,KAAK,SAASC,UAAWE,IAChC,kBAAC,IAAD,CAAOH,KAAK,YAAYC,UAAWJ,MAGvC,4BAAQJ,UAAU,iBCNJW,QACW,cAA7BvB,OAAOwB,SAASC,UAEe,UAA7BzB,OAAOwB,SAASC,UAEhBzB,OAAOwB,SAASC,SAASC,MACvB,2DCSNC,gBAVqB,CACnBC,OAAQ,0CACRC,WAAY,mCACZC,YAAa,0CACbC,UAAW,mBACXC,cAAe,+BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAIjBC,IAASC,OACP,kBAAC,IAAD,CAAUC,MAAOA,GACf,kBAAC,IAAD,KACE,kBAAC,EAAD,QAGJC,SAASC,eAAe,SDwGpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c365c6a6.chunk.js","sourcesContent":["const counterReducer = (state = 0, action: any) => {\r\n  switch (action.type) {\r\n    case \"INCREMENT\":\r\n      return state + 1;\r\n      break;\r\n    case \"DECREMENT\":\r\n      return state - 1;\r\n      break;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default counterReducer;\r\n","import { combineReducers } from \"redux\";\r\nimport counterReducer from \"./counter/reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n  counter: counterReducer,\r\n});\r\n\r\nexport default rootReducer;\r\n","import { createStore, compose } from \"redux\";\r\n\r\nimport rootReducer from \"./reducer\";\r\n\r\n\r\ndeclare global {\r\n  interface Window {\r\n    __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\r\n  }\r\n}\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst applicationStore = createStore(\r\n  rootReducer,\r\n  composeEnhancers()\r\n);\r\n\r\nexport default applicationStore;\r\n","\r\nexport const increment = () => {\r\n  return {\r\n    type: 'INCREMENT'\r\n  }\r\n}\r\n\r\nexport const decrement = () => {\r\n  return {\r\n    type: 'DECREMENT'\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { compose, bindActionCreators } from \"redux\";\r\nimport { connect } from 'react-redux';\r\nimport { increment, decrement } from '../store/reducer/counter/actions';\r\nimport { Link } from \"react-router-dom\";\r\n\r\ninterface HomeState {\r\n  counter: any;\r\n  dispatchIncrement: any,\r\n  dispatchDecrement: any,\r\n}\r\n\r\nfunction Home({ counter, dispatchIncrement, dispatchDecrement }: HomeState) {\r\n  return (\r\n    <div className=\"Home\">\r\n      <header className=\"Home-header\">\r\n        <h1>Hello World!</h1>\r\n        <input\r\n          type=\"button\"\r\n          value=\"INCREMENT\"\r\n          className=\"bg-gray-200 hover:bg-white hover:border-gray-300 focus:outline-none focus:bg-white focus:shadow-outline focus:border-gray-300\"\r\n          onClick={dispatchIncrement}\r\n        />\r\n        <input\r\n          type=\"button\"\r\n          value=\"DECREMENT\"\r\n          onClick={dispatchDecrement}\r\n        />\r\n        <p>{counter}</p>\r\n        <Link to=\"/about\">About</Link>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\nconst mapDispatchToProps = (dispatch: any) =>\r\n  bindActionCreators(\r\n    {\r\n      dispatchIncrement: increment,\r\n      dispatchDecrement: decrement\r\n    },\r\n    dispatch\r\n  );\r\n\r\nconst mapStateToProps = (state: any) => ({\r\n  counter: state.counter\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Home) as any;\r\n","import React from \"react\";\r\nimport { compose, bindActionCreators } from \"redux\";\r\nimport { connect } from \"react-redux\";\r\nimport { increment, decrement } from \"../store/reducer/counter/actions\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\ninterface AboutState {\r\n  counter: any;\r\n  dispatchIncrement: any;\r\n  dispatchDecrement: any;\r\n}\r\n\r\nfunction About({ counter, }: AboutState) {\r\n  return (\r\n    <div className=\"Home\">\r\n      <header className=\"Home-header\">\r\n        <h1>Hello Boi!</h1>\r\n        <p>Counter: {counter}</p>\r\n        <Link to=\"/\">Home</Link>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state: any) => ({\r\n  counter: state.counter,\r\n});\r\n\r\nexport default connect(mapStateToProps)(About) as any;\r\n","import React from \"react\";\r\nimport { compose, bindActionCreators } from \"redux\";\r\nimport { connect } from \"react-redux\";\r\nimport { increment, decrement } from \"../store/reducer/counter/actions\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport \"../assets/landingpage.css\";\r\n\r\nfunction LandingPage() {\r\n  return (\r\n    <div className=\"landingpage\">\r\n      <div className=\"navigation-burger absolute\">\r\n        <span>Hello World</span>\r\n      </div>\r\n      <div className=\"motto-container absolute \">\r\n        <span className=\"motto-1 motto\">Loyalty</span>\r\n        <span className=\"motto-2 motto\">Courage</span>\r\n        <span className=\"motto-3 motto\">Endurance</span>\r\n        <div className=\"continuation-container\">\r\n          <span>Dominik Berger</span>\r\n          <span className=\"more\" >more</span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LandingPage;\r\n","import React from 'react';\nimport { Switch, Route } from 'react-router';\n\n\nimport Home from \"./view/Home\";\nimport About from \"./view/About\";\nimport LandingPage from \"./view/Landingpage\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div>\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Route path=\"/about\" component={About} />\n          <Route path=\"/homepage\" component={LandingPage} />\n        </Switch>\n      </div>\n      <header className=\"App-header\"></header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport './tailwind.output.css';\n\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\n\n\nimport * as firebase from 'firebase';\n\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nvar firebaseConfig = {\n  apiKey: \"AIzaSyA4evUBL9vQufI73UA4A8HykURtoY-vO4I\",\n  authDomain: \"doemuulive-56e78.firebaseapp.com\",\n  databaseURL: \"https://doemuulive-56e78.firebaseio.com\",\n  projectId: \"doemuulive-56e78\",\n  storageBucket: \"doemuulive-56e78.appspot.com\",\n  messagingSenderId: \"534323793959\",\n  appId: \"1:534323793959:web:3005474a56f603c20c7e02\",\n  measurementId: \"G-4P3WK5GKEE\",\n};\nfirebase.initializeApp(firebaseConfig);\n\nReactDOM.render(\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}